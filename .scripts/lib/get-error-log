#!/usr/bin/env bash

# Returns the absolute path to the error log. Creates the log as well as its parent directories if 
# necessary.
#
# Throws an error if the log (or its parent directories) can't be created.
#
# Returns the path to another, special log, the log for new errors, when called with the -n flag
# (see below). Creates that log file and its parent directories if necessary.
#
# The log for new errors vs the ordinary error log
# ------------------------------------------------
#
# The log for new errors is a separate log file. Any new errors are logged there as well as in the
# ordinary error log, and are kept there until they have been displayed to the user (or been
# processed in another way). Once that has happened, the entries are purged from the log for new
# errors, but they remain in the ordinary log file as a permanent record.
#
# In practical terms: If the log for new errors is not empty, it means that new errors have
# occurred. After they have been processed, the log can either be emptied or the file can be
# deleted. It will be recreated the next time this command is called.
#
# Location in the Linux filesystem
# --------------------------------
#
# Earlier versions of the script had placed the logs into the .admin\Logs directory in the Windows
# filesystem. But access was too slow. Even without writing to the logs, closing the output stream
# at the end of every Cloudypass call took so long that it introduced intolerable delays. Moving the
# logs to the Linux filesystem solved the problem.
#
# Location ID
# -----------
#
# In theory, multiple Cloudypass setups can coexist, even though that is unlikely in practice. Logs
# should be location-specific and keep multiple installations apart. The path to the .admin
# directory of a particular Cloudypass setup is hashed and becomes the unique identifier for that
# setup. The corresponding logs are kept in a directory which is derived from the location ID.
#
# Option:
#
# -n, --new-errors:  returns the path to the log for new errors

set -u

# Script name
PROGNAME="$(basename "$BASH_SOURCE")"

# Absolute path to the script.
progdir="$([[ "$BASH_SOURCE" == /* ]] && dirname "$BASH_SOURCE" || { _dir="$( realpath -e "$BASH_SOURCE")"; [[ "$_dir" == /* ]] && dirname "$_dir" || pwd; })"

export PATH="$progdir:$PATH"

# Functions
fatal_error() { echo -e "$PROGNAME: $1" >&2; exit 1; }

# Preconfigured paths and location ID
admin_dir="$(realpath "$progdir/../..")"
location_id="$(
    set -o pipefail    # See https://stackoverflow.com/a/19804002/508355

    echo -n "$admin_dir" | md5sum | cut -d ' ' -f 1    # See https://askubuntu.com/q/53846/1027405

    [ $? -ne 0 ] && exit 1; set +o pipefail
)" || fatal_error "Error while determining the MD5 checksum of the path \"$admin_dir\". The location ID cannot be created."

LOG_DIR="$HOME/.local/state/cloudypass/logs/location-id-$location_id"
ERROR_LOG="$LOG_DIR/sync.error.log"
NEW_ERRORS_LOG="$LOG_DIR/new.sync.errors.log"

# Set up the error logs
if [ ! -d "$LOG_DIR" ]; then
    mkdir -p "$LOG_DIR" || fatal_error "Failed to create the log directory at: $(wsl-windows-path -ef "$LOG_DIR")"
fi

touch "$ERROR_LOG" || fatal_error "Failed to create or access the error log file at: $(wsl-windows-path -ef "$ERROR_LOG")"
touch "$NEW_ERRORS_LOG" || fatal_error "Failed to create or access the log file for new errors at: $(wsl-windows-path -ef "$NEW_ERRORS_LOG")"

# Arguments
(( $# > 1 )) && fatal_error "Incorrect number of arguments. $PROGNAME expects one argument at most, but $# were provided."

# Output
if (( $# == 0 )); then
    echo "$ERROR_LOG"
elif [[ "$1" == "-n" || "$1" == "--new-errors" ]]; then
    echo "$NEW_ERRORS_LOG"
else
    fatal_error "Unknown argument or option '$1'"
fi
